0:[[["",{"children":["posts",{"children":[["path","2022-12-02_axum_server","d"],{"children":["__PAGE__?{\"path\":\"2022-12-02_axum_server\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"/dev/blog - /dev/blog - Axum Server"}],["$","meta",null,{"name":"description","content":"Implementing a Web Server in Rust using axum"}],["$","meta",null,{"name":"application-name","content":"/dev/blog"}],null,null,["$","meta",null,{"name":"generator","content":"Next.js"}],["$","meta",null,{"name":"keywords","content":"Dev,Blog,Programmings"}],["$","meta",null,{"name":"referrer","content":"origin-when-cross-origin"}],[["$","meta",null,{"name":"theme-color","content":"amber"}]],["$","meta",null,{"name":"color-scheme","content":"dark"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta",null,{"name":"creator","content":"Joshua Chapman"}],null,null,null,null,null,null,null,null,null,[]],[["$","link",null,{"rel":"canonical","href":"https://joshuachp.dev/posts/2022-12-02_axum_server"}],null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.svg","type":"image/svg+xml"}],["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}],["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}]],[],null]]
1:["$L3",null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/816f3edd0640ecf0.css","precedence":"next.js"}]]]
4:I{"id":"5376","name":"","chunks":["619:619-3a70a20416de9ff0","185:app/layout-4b8fb878def027fc"],"async":false}
5:I{"id":"6722","name":"","chunks":["619:619-3a70a20416de9ff0","185:app/layout-4b8fb878def027fc"],"async":false}
6:I{"id":"9299","name":"","chunks":["619:619-3a70a20416de9ff0","185:app/layout-4b8fb878def027fc"],"async":false}
7:I{"id":"5019","name":"","chunks":["619:619-3a70a20416de9ff0","185:app/layout-4b8fb878def027fc"],"async":false}
8:I{"id":"1300","name":"","chunks":["272:webpack-e24f1f8cbee90348","667:2443530c-65ca4daeaf429502","961:961-409d5e344dd5ce3d"],"async":false}
9:I{"id":"6022","name":"","chunks":["272:webpack-e24f1f8cbee90348","667:2443530c-65ca4daeaf429502","961:961-409d5e344dd5ce3d"],"async":false}
3:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","$L4",null,{"production":true,"goatCounterApi":"a7d98e3f-b56b"}],["$","$L5",null,{"id":"dark-theme","strategy":"beforeInteractive","children":"if(localStorage.theme==='Dark'||((!('theme'in localStorage)||localStorage.theme==='Auto')&&window.matchMedia('(prefers-color-scheme: dark)').matches)){document.documentElement.classList.add('dark')}"}]]}],["$","body",null,{"className":"bg-primary-50 dark:bg-primary-900","children":["$","$L6",null,{"children":[["$","$L7",null,{}],["$","main",null,{"className":"flex flex-col justify-center p-6 sm:px-12 md:px-24 lg:px-48 xl:px-60 2xl:px-96","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["path","2022-12-02_axum_server","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$La",null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2a1840b1c557e13c.css","precedence":"next.js"}]]],"segment":"__PAGE__?{\"path\":\"2022-12-02_axum_server\"}"}}],"segment":["path","2022-12-02_axum_server","d"]}}],"segment":"posts"}}]}]]}]}]]}]
b:I{"id":"7876","name":"","chunks":["619:619-3a70a20416de9ff0","563:app/posts/[path]/page-f449502d4ce927b8"],"async":false}
c:I{"id":"3619","name":"","chunks":["619:619-3a70a20416de9ff0","991:app/posts/page-2384259669d00c2b"],"async":false}
a:["$","article",null,{"className":"flex max-w-full grow flex-col justify-self-start","children":[["$","h1",null,{"className":"mb-4 text-primary-900 dark:text-primary-50 text-4xl font-extrabold tracking-tight sm:text-5xl md:text-6xl","children":[["$","span","1",{"children":"Axum Server"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","4",{"children":"Install required dependencies"}]]}],["$","$Lb","8",{"language":"bash","className":"mb-4 mt-2","children":[["$","span","7",{"children":"cargo add axum\ncargo add hyper --features=full\ncargo add tokio --features=full\ncargo add toker\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","10",{"children":"Lets create a new function that will return the "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"axum::routing::Router"}],["$","span","12",{"children":". This"}],"\r\n",["$","span","14",{"children":"will be the core of our server."}]]}],["$","$Lb","18",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","17",{"children":"// src/main.rs\nfn app() -> Router {\n    Router::new().route(\"/\", get(|| async { \"Hello, World!\" }))\n}\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","20",{"children":"Creating a function that returns the "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"Router"}],["$","span","22",{"children":" will help us later to test our"}],"\r\n",["$","span","24",{"children":"application."}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","27",{"children":"Add the tokio config to the main function."}]]}],["$","$Lb","31",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","30",{"children":"// src/main.rs\n#[tokio::main]\nasync fn main() {\n// ...\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","33",{"children":"Create the socket address we will listen on."}]]}],["$","$Lb","37",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","36",{"children":"// src/main.rs fn main()\nlet address = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)), 8080);\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","39",{"children":"And bind the address to our application."}]]}],["$","$Lb","43",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","42",{"children":"// src/main.rs fn main()\naxum::Server::bind(&address)\n    .serve(app().into_make_service())\n    .await\n    .unwrap();\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","45",{"children":"Lets test our server out, in one terminal let"}],["$","span","46",{"children":"’"}],["$","span","47",{"children":"s start the server and in another"}],"\r\n",["$","span","49",{"children":"we will use "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"curl"}],["$","span","51",{"children":" to call the endpoint we just created."}]]}],["$","$Lb","55",{"language":"bash","className":"mb-4 mt-2","children":[["$","span","54",{"children":"# one terminal\ncargo run\n# the other terminal\ncurl 127.0.0.1:8080 # Hello, world!\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","57",{"children":"Let"}],["$","span","58",{"children":"’"}],["$","span","59",{"children":"s add an automatic test for the "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"/"}],["$","span","61",{"children":" route. Lets start by adding the test"}],"\r\n",["$","span","63",{"children":"that will create our application."}]]}],["$","$Lb","67",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","66",{"children":"// src/main.rs\n#[cfg(test)]\nmod test {\n    use super::app;\n\n    #[tokio::test]\n    async fn hello_world() {\n        let app = app();\n    }\n}\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","69",{"children":"The "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"#[tokio::test]"}],["$","span","71",{"children":" will let us create and async test. Let"}],["$","span","72",{"children":"’"}],["$","span","73",{"children":"s make the request"}],"\r\n",["$","span","75",{"children":"for the endpoint inside the test."}]]}],["$","$Lb","79",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","78",{"children":"// src/main.rs mod test\n// dependencies for the response\nuse axum::{body::Body, http::Request};\nuse tower::ServiceExt; // for oneshot\n\n#[tokio::test]\nasync fn hello_world() {\n    let app = app();\n\n    let response = app\n        .oneshot(Request::builder().uri(\"/\").body(Body::empty()).unwrap())\n        .await\n        .unwrap();\n// ...\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","81",{"children":"Finally let"}],["$","span","82",{"children":"’"}],["$","span","83",{"children":"s add the assertions to the test."}]]}],["$","$Lb","87",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","86",{"children":"// src/main.rs mod test fn hello_world()\nlet response = ...;\n\nassert_eq!(response.status(), StatusCode::OK);\n\nlet body = hyper::body::to_bytes(response.into_body()).await.unwrap();\nassert_eq!(&body[..], b\"Hello, World!\");\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","89",{"children":"Now we have a working and tested web server. Lets add some more useful"}],"\r\n",["$","span","91",{"children":"utilities."}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","94",{"children":"The first is "}],["$","$Lc",null,{"title":"","className":"font-bold text-accent-700 visited:text-accent-900 hover:underline dark:text-accent-400 dark:visited:text-accent-600","href":"https://docs.rs/color-eyre/latest/color_eyre/","children":[["$","span","96",{"children":"color-eyre"}]]}],["$","span","98",{"children":" to"}],"\r\n",["$","span","100",{"children":"have a better panic handler."}]]}],["$","$Lb","104",{"language":"bash","className":"mb-4 mt-2","children":[["$","span","103",{"children":"cargo add color_eyre\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","106",{"children":"Then, we have to initialize the panic handler."}]]}],["$","$Lb","110",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","109",{"children":"// src/main.rs\nuse color_eyre::Result;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    color_eyre::install()?;\n\n    // ...\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","112",{"children":"Now we can use the "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"?"}],["$","span","114",{"children":" in the main function instead of "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"unwrap"}],["$","span","116",{"children":" for errors. You"}],"\r\n",["$","span","118",{"children":"can try to run two instances of the program at the same time to see an example"}],"\r\n",["$","span","120",{"children":"of the eyre errors."}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","123",{"children":"Finally, we want to log what our server is doing. To do that we will use the"}],"\r\n",["$","span","125",{"children":"tracing crate, which is already integrated with axum and eyre."}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","128",{"children":"So let"}],["$","span","129",{"children":"’"}],["$","span","130",{"children":"s install the tracing dependencies."}]]}],["$","$Lb","134",{"language":"bash","className":"mb-4 mt-2","children":[["$","span","133",{"children":"cargo add tracing\ncargo add tracing_subscriber --features=env-filter\ncargo add tower_http --features=trace\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","136",{"children":"Then, in our "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"main.rs"}],["$","span","138",{"children":" after the eyre install we have to add the tracing"}],"\r\n",["$","span","140",{"children":"subscriber."}]]}],["$","$Lb","144",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","143",{"children":"// src/main.rs fn main()\ntracing_subscriber::registry()\n    .with(\n        tracing_subscriber::EnvFilter::try_from_default_env()\n            .unwrap_or_else(|_| \"example_testing=debug,tower_http=debug\".into()),\n    )\n    .with(tracing_subscriber::fmt::layer())\n    .init();\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","146",{"children":"Where "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"example_testing"}],["$","span","148",{"children":" is the name of our application. This will try to parse"}],"\r\n",["$","span","150",{"children":"the env filter or use "}],["$","code",null,{"className":" items-baseline rounded bg-primary-200 p-0.5 text-sm dark:bg-primary-700 sm:p-1 sm:text-base xl:text-lg","children":"debug"}],["$","span","152",{"children":" as a default for either our application and"}],"\r\n",["$","span","154",{"children":"tower."}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","157",{"children":"Next we add the tracing layer to the tower stack:"}]]}],["$","$Lb","161",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","160",{"children":"// src/main.rs\nfn app() -> Router {\n    Router::new()\n        .route(\"/\", get(|| async { \"Hello, World!\" }))\n        .layer(TraceLayer::new_for_http())\n}\n"}]]}],["$","p",null,{"className":"mb-2 text-sm text-primary-900 dark:text-primary-50 sm:text-base xl:text-lg","children":[["$","span","163",{"children":"Finally we can start tracing, let"}],["$","span","164",{"children":"’"}],["$","span","165",{"children":"s add a debug event for the server address."}]]}],["$","$Lb","169",{"language":"rust","className":"mb-4 mt-2","children":[["$","span","168",{"children":"// src/main.rs fn main()\nlet address = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)), 8080);\n\ntracing::debug!(\"listing on address {}\", address);\n"}]]}]]}]
