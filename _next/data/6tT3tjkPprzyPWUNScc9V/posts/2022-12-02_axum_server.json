{"pageProps":{"path":"2022-12-02_axum_server","article":{"title":"Axum Server","description":"Implementing a Web Server in Rust using axum","tags":["rust","web","backend"],"date":"2022-12-02","draft":false,"language":"en","content":[{"Start":{"Heading":["H1",null,[]]}},{"Text":"Axum Server"},{"End":{"Heading":["H1",null,[]]}},{"Start":"Paragraph"},{"Text":"Install required dependencies"},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"bash"}}},{"Text":"cargo add axum\ncargo add hyper --features=full\ncargo add tokio --features=full\ncargo add toker\n"},{"End":{"CodeBlock":{"Fenced":"bash"}}},{"Start":"Paragraph"},{"Text":"Lets create a new function that will return the "},{"Code":"axum::routing::Router"},{"Text":". This"},"SoftBreak",{"Text":"will be the core of our server."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs\nfn app() -> Router {\n    Router::new().route(\"/\", get(|| async { \"Hello, World!\" }))\n}\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Creating a function that returns the "},{"Code":"Router"},{"Text":" will help us later to test our"},"SoftBreak",{"Text":"application."},{"End":"Paragraph"},{"Start":"Paragraph"},{"Text":"Add the tokio config to the main function."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs\n#[tokio::main]\nasync fn main() {\n// ...\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Create the socket address we will listen on."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs fn main()\nlet address = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)), 8080);\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"And bind the address to our application."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs fn main()\naxum::Server::bind(&address)\n    .serve(app().into_make_service())\n    .await\n    .unwrap();\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Lets test our server out, in one terminal let"},{"Text":"’"},{"Text":"s start the server and in another"},"SoftBreak",{"Text":"we will use "},{"Code":"curl"},{"Text":" to call the endpoint we just created."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"bash"}}},{"Text":"# one terminal\ncargo run\n# the other terminal\ncurl 127.0.0.1:8080 # Hello, world!\n"},{"End":{"CodeBlock":{"Fenced":"bash"}}},{"Start":"Paragraph"},{"Text":"Let"},{"Text":"’"},{"Text":"s add an automatic test for the "},{"Code":"/"},{"Text":" route. Lets start by adding the test"},"SoftBreak",{"Text":"that will create our application."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs\n#[cfg(test)]\nmod test {\n    use super::app;\n\n    #[tokio::test]\n    async fn hello_world() {\n        let app = app();\n    }\n}\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"The "},{"Code":"#[tokio::test]"},{"Text":" will let us create and async test. Let"},{"Text":"’"},{"Text":"s make the request"},"SoftBreak",{"Text":"for the endpoint inside the test."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs mod test\n// dependencies for the response\nuse axum::{body::Body, http::Request};\nuse tower::ServiceExt; // for oneshot\n\n#[tokio::test]\nasync fn hello_world() {\n    let app = app();\n\n    let response = app\n        .oneshot(Request::builder().uri(\"/\").body(Body::empty()).unwrap())\n        .await\n        .unwrap();\n// ...\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Finally let"},{"Text":"’"},{"Text":"s add the assertions to the test."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs mod test fn hello_world()\nlet response = ...;\n\nassert_eq!(response.status(), StatusCode::OK);\n\nlet body = hyper::body::to_bytes(response.into_body()).await.unwrap();\nassert_eq!(&body[..], b\"Hello, World!\");\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Now we have a working and tested web server. Lets add some more useful"},"SoftBreak",{"Text":"utilities."},{"End":"Paragraph"},{"Start":"Paragraph"},{"Text":"The first is "},{"Start":{"Link":["Inline","https://docs.rs/color-eyre/latest/color_eyre/",""]}},{"Text":"color-eyre"},{"End":{"Link":["Inline","https://docs.rs/color-eyre/latest/color_eyre/",""]}},{"Text":" to"},"SoftBreak",{"Text":"have a better panic handler."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"bash"}}},{"Text":"cargo add color_eyre\n"},{"End":{"CodeBlock":{"Fenced":"bash"}}},{"Start":"Paragraph"},{"Text":"Then, we have to initialize the panic handler."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs\nuse color_eyre::Result;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    color_eyre::install()?;\n\n    // ...\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Now we can use the "},{"Code":"?"},{"Text":" in the main function instead of "},{"Code":"unwrap"},{"Text":" for errors. You"},"SoftBreak",{"Text":"can try to run two instances of the program at the same time to see an example"},"SoftBreak",{"Text":"of the eyre errors."},{"End":"Paragraph"},{"Start":"Paragraph"},{"Text":"Finally, we want to log what our server is doing. To do that we will use the"},"SoftBreak",{"Text":"tracing crate, which is already integrated with axum and eyre."},{"End":"Paragraph"},{"Start":"Paragraph"},{"Text":"So let"},{"Text":"’"},{"Text":"s install the tracing dependencies."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"bash"}}},{"Text":"cargo add tracing\ncargo add tracing_subscriber --features=env-filter\ncargo add tower_http --features=trace\n"},{"End":{"CodeBlock":{"Fenced":"bash"}}},{"Start":"Paragraph"},{"Text":"Then, in our "},{"Code":"main.rs"},{"Text":" after the eyre install we have to add the tracing"},"SoftBreak",{"Text":"subscriber."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs fn main()\ntracing_subscriber::registry()\n    .with(\n        tracing_subscriber::EnvFilter::try_from_default_env()\n            .unwrap_or_else(|_| \"example_testing=debug,tower_http=debug\".into()),\n    )\n    .with(tracing_subscriber::fmt::layer())\n    .init();\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Where "},{"Code":"example_testing"},{"Text":" is the name of our application. This will try to parse"},"SoftBreak",{"Text":"the env filter or use "},{"Code":"debug"},{"Text":" as a default for either our application and"},"SoftBreak",{"Text":"tower."},{"End":"Paragraph"},{"Start":"Paragraph"},{"Text":"Next we add the tracing layer to the tower stack:"},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs\nfn app() -> Router {\n    Router::new()\n        .route(\"/\", get(|| async { \"Hello, World!\" }))\n        .layer(TraceLayer::new_for_http())\n}\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"Finally we can start tracing, let"},{"Text":"’"},{"Text":"s add a debug event for the server address."},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"// src/main.rs fn main()\nlet address = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)), 8080);\n\ntracing::debug!(\"listing on address {}\", address);\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}}]}},"__N_SSG":true}