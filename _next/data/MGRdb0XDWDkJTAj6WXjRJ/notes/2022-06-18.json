{"pageProps":{"path":"2022-06-18","article":{"title":"Jouranl 2022-06-18","description":null,"tags":["journal"],"date":"2022-06-18","draft":false,"language":"en","content":[{"Start":{"Heading":["H1",null,[]]}},{"Text":"Journal 2022-06-18"},{"End":{"Heading":["H1",null,[]]}},{"Start":{"Heading":["H2",null,[]]}},{"Text":"Rust"},{"End":{"Heading":["H2",null,[]]}},{"Start":{"List":null}},{"Start":"Item"},{"Start":{"Link":["Inline","https://crates.io/crates/pretty_assertions",""]}},{"Text":"pretty_assertions"},{"End":{"Link":["Inline","https://crates.io/crates/pretty_assertions",""]}},{"Text":": Overwrite"},"SoftBreak",{"Code":"assert_eq!"},{"Text":" with a drop-in replacement, adding a colorful diff."},{"End":"Item"},{"End":{"List":null}},{"Start":{"Heading":["H3",null,[]]}},{"Text":"Custom Serde Serialize"},{"End":{"Heading":["H3",null,[]]}},{"Start":"Paragraph"},{"Text":"It could be difficult to make a custom implementation of the "},{"Code":"serde::Serialize"},"SoftBreak",{"Text":"trait. Like serializing a "},{"Code":"Vec"},{"Text":" into a tree or graph structure. This is because"},"SoftBreak",{"Text":"you need to consume the "},{"Code":"serde::Serializer"},{"Text":" to create a data type like"},"SoftBreak",{"Text":"structure or sequence. A trick I implemented to overcome this limitation is to"},"SoftBreak",{"Text":"implement the visitor patten to a custom "},{"Code":"enum"},{"Text":" that implements "},{"Code":"Serialize"},"SoftBreak",{"Text":"itself."},{"End":"Paragraph"},{"Start":"Paragraph"},{"Text":"You start by implementing the "},{"Code":"Serialize"},{"Text":" for your structure:"},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"use serde::Serialize;\n\nimpl<T> Serialize for Vec<T>\nwhere\n    T: Serialize,\n{\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer,\n    {\n        let mut seq = serializer.serialize_seq(Some(self.len()))?;\n        for e in self {\n            ...\n        }\n        seq.end()\n    }\n}\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"And when you need an additional structure you create an enum and implement"},"SoftBreak",{"Code":"Serialize"},{"Text":" for it:"},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"\nenum ElementSerialize<T> {\n    Node{ elements: &[T], ...},\n    Childs{ elements: &[T], ...}\n}\n...\n\nimpl<T> Serialize for ElementSerialize<T>\nwhere\n    T: Serialize,\n{\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer,\n    {\n        match self {\n            Node{...} => todo!(), // Can now consume the serializer inside the match\n            Childs{...} => todo!(),\n        }\n    }\n}\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":"Paragraph"},{"Text":"And you can wrap the value in the Serialize of the structure:"},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"...\n        // Inside impl Serialize for Vec\n        for e in self {\n            seq.serialize_element(ElementSerialize::Node(...))?;\n        }\n...\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":{"Heading":["H3",null,[]]}},{"Text":"Publish a package"},{"End":{"Heading":["H3",null,[]]}},{"Start":"Paragraph"},{"Text":"To publish a packages to "},{"Start":{"Link":["Inline","https://crates.io",""]}},{"Text":"crates.io"},{"End":{"Link":["Inline","https://crates.io",""]}},{"Text":":"},{"End":"Paragraph"},{"Start":{"List":null}},{"Start":"Item"},{"Text":"Register on the site"},{"End":"Item"},{"Start":"Item"},{"Text":"Create a new API Token and save it"},{"End":"Item"},{"Start":"Item"},{"Text":"Set the token to work with cargo:"},{"Start":{"List":null}},{"Start":"Item"},{"Text":"Run "},{"Code":"cargo login"},{"Text":" to set the token in the "},{"Code":"$CARGO_HOME/credentials.toml"},"SoftBreak",{"Text":"file"},{"End":"Item"},{"Start":"Item"},{"Text":"Otherwise for CI/CD set the "},{"Code":"CARGO_REGISTRY_TOKEN"},{"Text":" environment variable"},{"End":"Item"},{"End":{"List":null}},{"End":"Item"},{"Start":"Item"},{"Text":"Run "},{"Code":"cargo publish"},{"End":"Item"},{"End":{"List":null}},{"Start":{"Heading":["H4",null,[]]}},{"Text":"Publish with GitHub Actions"},{"End":{"Heading":["H4",null,[]]}},{"Start":"Paragraph"},{"Text":"A simple workflow to publish a create when on a new release is the following:"},{"End":"Paragraph"},{"Start":{"CodeBlock":{"Fenced":"yaml"}}},{"Text":"name: Publish\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n      - name: Check\n        run: cargo check --all-targets --all-features --verbose --locked\n      - name: Build\n        run: cargo build --verbose --locked\n      - name: Run tests\n        run: cargo test --all-targets --all-features --verbose --locked\n      - name: Publish crate\n        run: cargo publish --verbose --locked\n        env:\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n"},{"End":{"CodeBlock":{"Fenced":"yaml"}}},{"Html":"<!-- Morning -->\n"},{"Html":"<!-- What do I want to do today? -->\n"},{"Html":"<!-- Evening -->\n"},{"Html":"<!-- What did I learn today? -->\n"},{"Html":"<!-- Things I learned -->\n"},{"Html":"<!-- Useful tools and libraries -->\n"}]}},"__N_SSG":true}