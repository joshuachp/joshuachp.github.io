{"pageProps":{"path":"2022-12-10_axum_sqlx_database","article":{"title":"Axum sqlx database","description":"Implement database connection Axum server w","tags":[],"date":"2022-12-10","draft":false,"language":"en","content":[{"Start":{"Heading":["H1",null,[]]}},{"Text":"Axum sqlx database"},{"End":{"Heading":["H1",null,[]]}},{"Start":{"List":null}},{"Start":"Item"},{"Text":"Install the dependencies:"},"SoftBreak",{"Code":"cargo add sqlx --features=runtime-tokio-native-tls,sqlite,macros,offline"},{"Start":{"List":null}},{"Start":"Item"},{"Text":"use tokio since axum is based on it"},{"End":"Item"},{"Start":"Item"},{"Text":"native TLS openssl but is the same as rust-ls"},{"End":"Item"},{"Start":"Item"},{"Text":"sqlite as the database engine"},{"End":"Item"},{"Start":"Item"},{"Text":"macros for type safe queries"},{"End":"Item"},{"Start":"Item"},{"Text":"offline mode for CI and test"},{"End":"Item"},{"Start":"Item"},{"Code":"chrono"},{"Text":" "},{"Start":"Emphasis"},{"Text":"(optional)"},{"End":"Emphasis"},{"Text":" for dates and times"},{"End":"Item"},{"End":{"List":null}},{"End":"Item"},{"Start":"Item"},{"Text":"Install "},{"Code":"sqlx-cli"},{"Text":" for migrations, through "},{"Code":"nix"},{"Text":" or "},{"Code":"cargo install"},{"End":"Item"},{"Start":"Item"},{"Text":"Sqlite connection option:"},{"Start":{"List":null}},{"Start":"Item"},{"Text":"see the series"},"SoftBreak",{"Start":{"Link":["Inline","https://fly.io/blog/sqlite-internals-wal/",""]}},{"Text":"fly.io - sqlite internals wall"},{"End":{"Link":["Inline","https://fly.io/blog/sqlite-internals-wal/",""]}},{"End":"Item"},{"Start":"Item"},{"Code":"journal_mode=wall"},{"End":"Item"},{"End":{"List":null}},{"End":"Item"},{"End":{"List":null}},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"let options = SqliteConnectOptions::from_str(db_url)?\n    .journal_mode(SqliteJournalMode::Wal);\nlet pool = SqlitePool::connect_with(options).await?;\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}},{"Start":{"List":null}},{"Start":"Item"},{"Text":"add it to the state of the application, pool is a value wrapped in an "},{"Code":"Arc"},"SoftBreak",{"Text":"so it"},{"Text":"â€™"},{"Text":"s safe to clone if needed and pass between threads."},{"End":"Item"},{"End":{"List":null}},{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"let app = app().with_state(State(pool));\n"},{"End":{"CodeBlock":{"Fenced":"rust"}}}]}},"__N_SSG":true}